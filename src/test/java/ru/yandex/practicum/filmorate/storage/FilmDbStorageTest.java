package ru.yandex.practicum.filmorate.storage;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.MpaRating;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class FilmDbStorageTest {

    private final JdbcTemplate jdbcTemplate;

    private final FilmDbStorage filmDbStorage;

    private final UserDbStorage userDbStorage;

    private Film film;

    private Film secondFilm;

    private MpaRating mpa;

    private User user;

    @BeforeEach
    void setUp() {
        mpa = MpaRating.builder().id(3).name("PG-13").build();

        film = Film.builder()
                .name("District 9")
                .description("My favorite movie")
                .releaseDate(LocalDate.parse("2009-08-13", DateTimeFormatter.ISO_DATE))
                .duration(112)
                .mpa(mpa)
                .build();
        secondFilm = Film.builder()
                .name("Inception")
                .description("Another favorite movie")
                .releaseDate(LocalDate.parse("2010-07-08", DateTimeFormatter.ISO_DATE))
                .duration(148)
                .mpa(mpa)
                .build();
        user = User.builder()
                .login("Shrimp")
                .name("Wikus Van De Merwe")
                .email("wikusvandemerwe@mcu.com")
                .birthday(LocalDate.parse("1973-11-27", DateTimeFormatter.ISO_DATE))
                .build();

        jdbcTemplate.update("create table if not exists films (\n" +
                "    id integer generated by default as identity primary key,\n" +
                "    name varchar(128),\n" +
                "    description varchar(1024),\n" +
                "    release_date date,\n" +
                "    duration integer,\n" +
                "    mpa_rating_id integer references mpa_ratings(id)\n" +
                ");"
        );

        jdbcTemplate.update("create table if not exists users (\n" +
                "    id integer generated by default as identity primary key,\n" +
                "    login varchar(64),\n" +
                "    name varchar(64),\n" +
                "    email varchar (64),\n" +
                "    birthday date\n" +
                ");"
        );

        filmDbStorage.addFilm(film);
        userDbStorage.addUser(user);
    }

    @AfterEach
    void tearDown() {
        jdbcTemplate.update("drop table films cascade");
        jdbcTemplate.update("delete from film_likes");
    }

    @Test
    void getFilms() {
        Collection<Film> actualFilms = filmDbStorage.getFilms();
        film.setId(1);
        Collection<Film> expectedFilms = Collections.singletonList(film);

        assertEquals(expectedFilms, actualFilms);
    }

    @Test
    void addFilm() {
        Film actualFilm = filmDbStorage.addFilm(secondFilm);
        assertEquals(2, actualFilm.getId());
    }

    @Test
    void updateFilm() {
        addFilm();
        secondFilm = secondFilm.toBuilder()
                .id(2)
                .name("Interstellar")
                .releaseDate(LocalDate.parse("2014-10-26", DateTimeFormatter.ISO_DATE))
                .duration(169)
                .build();

        Film actualFilm = filmDbStorage.updateFilm(secondFilm);

        assertEquals(secondFilm, actualFilm);
    }

    @Test
    void getFilmById() {
        Film actualFilm = filmDbStorage.getFilmById(1);
        film.setId(1);
        assertEquals(film, actualFilm);
    }

    @Test
    void addLike() {
        Film actualFilm = filmDbStorage.addLike(1, userDbStorage.getUserById(1).getId());
        film.setLikes(Collections.singleton(1));

        assertEquals(film.getLikes(), actualFilm.getLikes());
    }

    @Test
    void deleteLike() {
        addLike();
        Film actualFilm = filmDbStorage.deleteLike(1, userDbStorage.getUserById(1).getId());

        assertEquals(new HashSet<>(Collections.emptyList()), actualFilm.getLikes());
    }

    @Test
    void getPopularFilms() {
        List<Film> actualPopularFilms = filmDbStorage.getPopularFilms(1);
        film.setId(1);

        assertEquals(new ArrayList<>(Collections.singleton(film)), actualPopularFilms);
    }
}