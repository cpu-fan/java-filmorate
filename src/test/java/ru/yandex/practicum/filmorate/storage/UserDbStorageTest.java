package ru.yandex.practicum.filmorate.storage;

import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.exceptions.NotFoundException;
import ru.yandex.practicum.filmorate.model.User;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
class UserDbStorageTest {

    private final JdbcTemplate jdbcTemplate;
    private final UserDbStorage userDbStorage;
    private User user;
    private User newUser;
    private User friend;
    private User commonFriend;

    @BeforeEach
    void setUp() {
        jdbcTemplate.update("create table if not exists users (\n" +
                "    id integer generated by default as identity primary key,\n" +
                "    login varchar(64),\n" +
                "    name varchar(64),\n" +
                "    email varchar (64),\n" +
                "    birthday date\n" +
                ");"
        );

        user = User.builder()
                .login("McLovin")
                .name("Fogell")
                .email("mclovin@my-email.com")
                .birthday(LocalDate.parse("1992-06-20", DateTimeFormatter.ISO_DATE))
                .build();
        newUser = User.builder()
                .login("FatBoy")
                .name("Set")
                .email("seth@my-email.com")
                .birthday(LocalDate.parse("1992-02-08", DateTimeFormatter.ISO_DATE))
                .build();
        friend = User.builder()
                .login("userFriend")
                .name("friend")
                .email("friend@my-email.com")
                .birthday(LocalDate.parse("1992-03-10", DateTimeFormatter.ISO_DATE))
                .build();
        commonFriend = User.builder()
                .login("commonFriend")
                .name("common")
                .email("common@my-email.com")
                .birthday(LocalDate.parse("1993-01-25", DateTimeFormatter.ISO_DATE))
                .build();

        userDbStorage.addUser(user);
        userDbStorage.addUser(friend);
        userDbStorage.addUser(commonFriend);
    }

    @AfterEach
    void tearDown() {
        jdbcTemplate.update("drop table users cascade");
        jdbcTemplate.update("delete from friends");
    }

    @Test
    void getUsers() {
        Collection<User> actualUserList = userDbStorage.getUsers();
        user.setId(1);
        friend.setId(2);
        commonFriend.setId(3);
        Collection<User> expectedUserList = List.of(user, friend, commonFriend);

        assertEquals(expectedUserList, actualUserList);
    }

    @Test
    void addUser() {
        User user = userDbStorage.addUser(newUser);
        assertEquals(4, user.getId());
    }

    @Test
    void updateUser() {
        user = User.builder()
                .id(1)
                .name("new name")
                .login("new login")
                .birthday(LocalDate.parse("1992-03-10", DateTimeFormatter.ISO_DATE))
                .build();

        User actualUser = userDbStorage.updateUser(user);
        assertEquals(user, actualUser);
    }

    @Test
    void getUserById() {
        User actualUser = userDbStorage.getUserById(1);
        user.setId(1);
        assertEquals(user, actualUser);
    }

    @Test
    void shouldNotFoundUserById() {
        assertThrows(NotFoundException.class, () -> userDbStorage.getUserById(-1));
    }

    @Test
    void addFriend() {
        user = user.toBuilder().id(1).build();
        friend = friend.toBuilder().id(2).build();
        User actualUser = userDbStorage.addFriend(user.getId(), friend.getId());
        Set<Integer> actualUserFriends = actualUser.getFriends();
        Set<Integer> expectedUserFriends = new HashSet<>(Collections.singleton(2));

        assertEquals(expectedUserFriends, actualUserFriends);
    }

    @Test
    void deleteFriend() {
        addFriend();

        User actualUser = userDbStorage.deleteFriend(user.getId(), friend.getId());
        Set<Integer> actualUserFriends = actualUser.getFriends();
        Set<Integer> expectedUserFriends = new HashSet<>(Collections.emptyList());

        assertEquals(expectedUserFriends, actualUserFriends);
    }

    @Test
    void getFriends() {
        addFriend();
        User actualFriend = userDbStorage.getFriends(user.getId()).get(0);
        User expectedFriend = friend;
        assertEquals(expectedFriend, actualFriend);
    }

    @Test
    void getCommonFriends() {
        addFriend();
        commonFriend = commonFriend.toBuilder().id(3).build();
        userDbStorage.addFriend(user.getId(), commonFriend.getId());
        userDbStorage.addFriend(friend.getId(), commonFriend.getId());
        boolean isHaveCommon1 = userDbStorage.getUserById(1).getFriends().contains(3);
        boolean isHaveCommon2 = userDbStorage.getUserById(2).getFriends().contains(3);

        assertEquals(isHaveCommon1, isHaveCommon2);
    }
}